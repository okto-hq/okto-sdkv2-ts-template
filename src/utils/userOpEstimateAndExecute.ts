import { v4 as uuidv4 } from "uuid";
import axios from "axios";
import { signMessage } from "viem/accounts";
import { fromHex } from "viem";
import { generatePackedUserOp, generateUserOpHash } from "./generateUserOp.js";
import { serializeJSON } from "../helper/serializeJson.js";
import type { UserOp } from "../helper/types.js";

export interface SessionConfig {
  sessionPrivKey: string;
  sessionPubkey: string;
  userSWA: string;
}

/**
 * Estimates a user operation
 *
 * This function sends the payload to Okto's gateway for estimation
 * using a JSON-RPC request.
 *
 * @param userop - The user operation object containing all transaction details
 * @param authToken - Authentication token for Okto's API, generated from getAuthorizationToken
 *
 * @returns Estimate response along with unsigned userOp object
 *
 */
export async function estimateUserOp(payload: any, authToken: string) {
  const jobId = uuidv4();
  try {
    const requestBody = {
      method: "estimate",
      jsonrpc: "2.0",
      id: jobId,
      params: [payload],
    };

    payload.jobId = jobId;

    const serializedPayload = serializeJSON(requestBody);
    console.log("finally sending the axios request for estimate...........");
    const response = await axios.post(
      "https://sandbox-okto-gateway.oktostage.com/rpc", // RPC url for the OKTO Gateway
      serializedPayload,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${authToken}`,
        },
      }
    );

    return response.data;
  } catch (err: any) {
    const errorMessage =
      err.response?.data?.error?.message ||
      "An error occurred during estimateUserOp";

    console.error("Error estimating user operation:", err.response?.data);
    throw new Error(errorMessage);
  }
}

export async function swapEstimateUserOp(requestBody: any, authToken: string) {
  const jobId = uuidv4();
  try {
    const swapPayload = requestBody;
    swapPayload.jobId = jobId;

    console.log("finally sending the axios request ...........");
    const response = await axios.post(
      "https://sandbox-api.okto.tech/api/oc/v1/estimate", // Okto 3pBFF url
      swapPayload,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${authToken}`,
        },
      }
    );

    return response.data;
  } catch (error) {
    console.error("Error executing user operation:", error);
    throw error;
  }
}

/**
 * Signs a user operation
 *
 * This function converts a user operation to its packed format, generates a hash,
 * and signs it using the provided session private key.
 *
 * @param userop - The user operation object containing all transaction details such as:
 *                 sender, nonce, callData, gas parameters, etc.
 * @param sessionConfig - Configuration containing session credentials:
 *                       - sessionPrivKey: The private key used for signing
 *                       - sessionPubkey: The corresponding public key
 *                       - userSWA: The user's Smart Wallet Account address
 *
 * @returns The original user operation with the signature field added
 */
export async function signUserOp(userop: any, sessionConfig: SessionConfig) {
  const privateKey = sessionConfig.sessionPrivKey as `0x${string}`;
  const packeduserop = generatePackedUserOp(userop);
  const hash = generateUserOpHash(packeduserop);
  const sig = await signMessage({
    message: {
      raw: fromHex(hash, "bytes"),
    },
    privateKey,
  });
  userop.signature = sig;
  return userop;
}

/**
 * Execute a user operation
 *
 * This function sends the signed user operation to Okto's gateway for execution
 * using a JSON-RPC request.
 *
 * @param userop - The signed user operation object containing all transaction details
 *                and the signature generated by signUserOp
 * @param authToken - Authentication token for Okto's API, generated from getAuthorizationToken
 *
 * @returns The job ID that can be used to track the transaction's status
 *
 */
export async function executeUserOp(userop: any, authToken: string) {
  try {
    const requestBody = {
      method: "execute",
      jsonrpc: "2.0",
      id: uuidv4(),
      params: [userop],
    };

    const serializedPayload = serializeJSON(requestBody);
    console.log("finally sending the axios request for execute...........");
    const response = await axios.post(
      "https://sandbox-okto-gateway.oktostage.com/rpc", // RPC url for the OKTO Gateway
      serializedPayload,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${authToken}`,
        },
      }
    );

    return response.data.result.jobId;
  } catch (error) {
    console.error("Error executing user operation:", error);
    throw error;
  }
}

export async function getUserOperationGasPrice(authToken: string) {
  const requestBody = {
    method: "getUserOperationGasPrice",
    jsonrpc: "2.0",
    id: uuidv4(),
    params: [],
  };

  const serializedPayload = serializeJSON(requestBody);

  const response = await axios.post(
    "https://sandbox-okto-gateway.oktostage.com/rpc", // RPC url for the OKTO Gateway
    serializedPayload,
    {
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${authToken}`,
      },
    }
  );

  return response.data.result;
}
