/*
 * This script explains how to perform token transfer intent when the okto auth token is available
 */

import { toHex, type Hash, type Hex } from "viem";
import { v4 as uuidv4 } from "uuid";
import { Constants } from "../helper/constants.js";
import { paymasterData } from "../utils/generatePaymasterData.js";
import {
  signUserOp,
  executeUserOp,
  type SessionConfig,
  estimateUserOp,
} from "../utils/userOpEstimateAndExecute.js";
import { getChains } from "../utils/getChains.js";

import dotenv from "dotenv";

dotenv.config();
const OktoAuthToken = process.env.OKTO_AUTH_TOKEN as string;

interface Data {
  caipId: string;
  recipient: string;
  token: string;
  amount: string;
}

/**
 * Creates, estimates and executes a user operation for token transfer.
 *
 * This function initiates the process of transferring a token by encoding the necessary parameters into a User Operation.
 * For more information, check https://docs.okto.tech/docs/openapi/tokenTransfer
 *
 * @param data - The parameters for transferring the token (caip2Id, recipientWalletAddress, tokenAddress, amount)
 * @param sessionConfig - The sessionConfig object containing user SWA and session keys.
 * @returns The job ID for the token transfer.
 */
export async function transferToken(data: Data, sessionConfig: SessionConfig) {

  // Generate a unique UUID based nonce
  const nonce = uuidv4();

  // get the Chain CAIP2ID required for payload construction
  // Note: Only the chains enabled on the Client's Developer Dashboard will be shown in the response
  const chains = await getChains(OktoAuthToken);
  console.log("Chains: ", chains);
  // Sample Response:
  //   Chains:  [
  //   {
  //     caip_id: 'eip155:8453',
  //     network_name: 'BASE',
  //     chain_id: '8453',
  //     logo: 'BASE',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'EVM',
  //     network_id: '9400de12-efc6-3e69-ab02-0eaf5aaf21e5',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   },
  //   {
  //     caip_id: 'solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1',
  //     network_name: 'SOLANA_DEVNET',
  //     chain_id: '103',
  //     logo: 'SOL DEVNET',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'SVM',
  //     network_id: 'fb10a9ca-d197-378d-8fb3-fd95345571f3',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   },
  //   {
  //     caip_id: 'eip155:84532',
  //     network_name: 'BASE_TESTNET',
  //     chain_id: '84532',
  //     logo: 'BASE_TESTNET',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'EVM',
  //     network_id: '8970cafe-4fc2-3a71-a7d3-77a672b749e9',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   }
  // ]

  const currentChain = chains.find(
    (chain: any) => chain.caip_id === data.caipId
  );
  if (!currentChain) {
    throw new Error(`Chain Not Supported`);
  }

  // create the Estimate UserOp payload for token transfer intent
  console.log("generating estimateUserOp Payload..."); // to be removed
  const estimateUserOpPayload = {
    type: "TOKEN_TRANSFER",
    jobId: "",
    paymasterData: await paymasterData({
      nonce,
      validUntil: new Date(Date.now() + 6 * Constants.HOURS_IN_MS),
    }),
    gasDetails: {
      maxFeePerGas: toHex(Constants.GAS_LIMITS.MAX_FEE_PER_GAS),
      maxPriorityFeePerGas: toHex(
        Constants.GAS_LIMITS.MAX_PRIORITY_FEE_PER_GAS
      ),
    },
    details: {
      recipientWalletAddress: data.recipient,
      caip2Id: data.caipId,
      tokenAddress: data.token,
      amount: data.amount,
    },
  };

  console.log("estimate userop payload", estimateUserOpPayload);
  // Sample Payload: {
  //     "type": "TOKEN_TRANSFER",
  //     "jobId": "92ba01db-4476-4e4d-9289-270429478121",
  //     "paymasterData": "0x0000000000000000000000000430e673e084367ba371e0653f28cda1bfb57db4000000000000000000000000000000000000000000000000000000006d0db17b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004193956eec47540e6579a093869d78bcd606220db7d4764812d012a095090d153772533ab5d4394f7adbf60d3421e7c2aa7c5c92e0a57e3ca22e79803c9e7c71961c00000000000000000000000000000000000000000000000000000000000000",
  //     "gasDetails": {
  //         "maxFeePerGas": "0xBA43B7400",
  //         "maxPriorityFeePerGas": "0xBA43B7400"
  //     },
  //     "details": {
  //         "recipientWalletAddress": "0x15000a9E47E8527a7C4A02189e581F4D0Df589C3",
  //         "caip2Id": "eip155:137",
  //         "tokenAddress": "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
  //         "amount": "1"
  //     }
  // }

  console.log("calling estimate userop...");

  const estimateUserOpResponse = await estimateUserOp(
    estimateUserOpPayload,
    OktoAuthToken
  );
  // Sample Response:
  //   estimateUserOpResponse:  {
  //     "jsonrpc": "2.0",
  //     "id": "a3db5fb9-f6de-4361-ac98-61978c2de962",
  //     "result": {
  //         "details": {
  //             "estimation": {
  //                 "amount": "292"
  //             },
  //             "fees": {
  //                 "transactionFees": {
  //                     "eip155:137": "19303200000000000"
  //                 },
  //                 "approxTransactionFeesInUSDT": ""
  //             }
  //         },
  //         "callData": {
  //             "intentType": "TOKEN_TRANSFER",
  //             "jobId": "94cf4dde-4fb6-43fa-9f63-e444f857955a",
  //             "vendorId": "0x6b6Fad2600Bc57075ee560A6fdF362FfefB9dC3C",
  //             "creatorId": "0xE14A85291F6A8DE60dC06b2dD373DfFDa779AF8D",
  //             "policies": {
  //                 "gsnEnabled": false,
  //                 "sponsorshipEnabled": false
  //             },
  //             "gsn": {
  //                 "isPossible": false,
  //                 "isRequired": false,
  //                 "requiredNetworks": [],
  //                 "tokens": []
  //             },
  //             "payload": {
  //                 "amount": "292",
  //                 "networkId": "eip155:137",
  //                 "recipientWalletAddress": "0x4FB6c27e0b862360219F70EB490c99E2328652fe",
  //                 "tokenAddress": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F"
  //             }
  //         },
  //         "userOps": {
  //             "sender": "0xe14a85291f6a8de60dc06b2dd373dffda779af8d",
  //             "nonce": "0x0000000000000000000000000000000094cf4dde4fb643fa9f63e444f857955a",
  //             "callData": "0x8dd7712f00000000000000000000000000000000000000000000000000000000000000000000000000000000ed8fe2543efff64fc3567b03b612aa82c409579a000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004248fa61ac00000000000000000000000000000000094cf4dde4fb643fa9f63e444f857955a0000000000000000000000006b6fad2600bc57075ee560a6fdf362ffefb9dc3c000000000000000000000000e14a85291f6a8de60dc06b2dd373dffda779af8d00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000124000000000000000000000000000000000000000000000000000000000000000a6569703135353a31333700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30783446423663323765306238363233363032313946373045423439306339394532333238363532666500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a30786332313332443035443331633931346138374336363131433130373438414562303442353865384600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e544f4b454e5f5452414e5346455200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
  //             "callGasLimit": "0x484f6",
  //             "verificationGasLimit": "0x16c6c",
  //             "preVerificationGas": "0x1550d",
  //             "maxFeePerGas": "0xBA43B7400",
  //             "maxPriorityFeePerGas": "0xBA43B7400",
  //             "paymaster": "0x9b34131837d534cd199c0b8fdd8347c05e21a2d8",
  //             "paymasterVerificationGasLimit": "0x5489",
  //             "paymasterPostOpGasLimit": "0x1",
  //             "paymasterData": "0x0000000000000000000000006b6fad2600bc57075ee560a6fdf362ffefb9dc3c000000000000000000000000000000000000000000000000000000006d0db17b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004154068cf6e7a8500235b3f765aeda6354d6979bcbc4243a09122a54184dec9fef07566cd973f27533eac066a53733bc722216d9af5c139847e99e3b3303ebfcf11c00000000000000000000000000000000000000000000000000000000000000"
  //         }
  //     }
  // }

  // Get the UserOp from the estimate response fetched above, sign it and add the signature to the userOp
  const userOp = estimateUserOpResponse.result.userOps;
  console.log("UserOp: ", userOp);

  const signedUserOp = await signUserOp(userOp, sessionConfig);
  console.log("Signed UserOp: ", signedUserOp);
  // Sample Response:
  //   signed UserOp:  {
  //   sender: '0x61795557B50DC229199cE51c46935d7eC560c52F',
  //   nonce: '0x0000000000000000000000000000000039fc9d23dda3447f89c8d3e11f9b3206',
  //   paymaster: '0x0871051BfF8C7041c985dEddFA8eF63d23AD3Fa0',
  //   callGasLimit: '0x493e0',
  //   verificationGasLimit: '0x30d40',
  //   preVerificationGas: '0xc350',
  //   maxFeePerGas: '0x77359400',
  //   maxPriorityFeePerGas: '0x77359400',
  //   paymasterPostOpGasLimit: '0x186a0',
  //   paymasterVerificationGasLimit: '0x186a0',
  //   callData: '0x8dd7712f00000000000000000000000000000000000000000000000000000000000000000000000000000000ed3d17cae886e008d325ad7c34f3bde030b80c2e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003e48fa61ac00000000000000000000000000000000039fc9d23dda3447f89c8d3e11f9b320600000000000000000000000071c6ac62752acea820c55de730c24805a200e1ce00000000000000000000000061795557b50dc229199ce51c46935d7ec560c52f00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000009184e72a000000000000000000000000000000000000000000000000000000000000000000c6569703135353a38343533320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a307839363762323663396537376632663565303735336263626362326262363234653562626666323463000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e544f4b454e5f5452414e5346455200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  //   paymasterData: '0x00000000000000000000000071c6ac62752acea820c55de730c24805a200e1ce0000000000000000000000000000000000000000000000000000000067cb13a20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000419f8ec082cc1b894fcaec21d0f4cf6938427f3870d27c997d32e92a6c414301c35bfe0efe99953a772fbf4f41d199a3358c4239f4f48dc4ac1088177f5932a4e81b00000000000000000000000000000000000000000000000000000000000000',
  //   signature: '0xaeffe7a4cececd894d55cc8a049b6fb042d5e3481d7242a2c1cd81a63161a6c313bc7ad89c91ef2c44b21213c740765b4d87b32e5e84598b0284396e39565db61b'
  // }

  // Execute the userOp
  const jobId = await executeUserOp(signedUserOp, OktoAuthToken);
  console.log("Job ID:", jobId);
  // Sample Response:
  //   jobId: a0a54427-11c8-4140-bfcc-e96af15ce9cf
}

// To get the caipId, please check: https://docsv2.okto.tech/docs/openapi/technical-reference
const data: Data = {
  caipId: "eip155:84532", // BASE_TESTNET
  recipient: "0x88beE8eb691FFAFB192BAC4D1E7042e1b44c3eF2", // Sample recipient on BASE_TESTNET
  token: "", // Left empty because transferring native token
  amount: "1000000000000", // denomination in lowest decimal (18 for WETH)
};

const sessionConfig: SessionConfig = {
  sessionPrivKey:
    "0xa7a313f22193aa7a7a8721b23279fcc03f5cd8b54de291f94300128eb9d9962e",
  sessionPubkey:
    "0x044a9339fd9d1526ac66f2514479b1e862340e44a73937c6efe671fa5ec9f27a18f6d3b6ac2d6cc4c70b8dba423878e2fa27d8402da90065b971e0b972898e8d76",
  userSWA: "0x8B20023FC47D8F8BDB7418722dBB0e3e9964a906",
};

transferToken(data, sessionConfig);
