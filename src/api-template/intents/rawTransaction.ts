/*
 * This script explains how to perform raw txn execute intent when the okto auth token is available
 */

import {
  encodeAbiParameters,
  encodeFunctionData,
  parseAbiParameters,
  toHex,
  stringToBytes,
  type Hex,
} from "viem";
import { v4 as uuidv4 } from "uuid";
import { INTENT_ABI } from "../helper/abi.js";
import { Constants } from "../helper/constants.js";
import { paymasterData } from "../utils/generatePaymasterData.js";
import { nonceToBigInt } from "../helper/nonceToBigInt.js";
import {
  signUserOp,
  executeUserOp,
  type SessionConfig,
  getUserOperationGasPrice,
} from "../utils/invokeExecuteUserOp.js";
import dotenv from "dotenv";
import { getChains } from "../explorer/getChains.js";
import type { Address, ExecuteUserOpResponse } from "../helper/types.js";
import { getOrderHistory } from "../utils/getOrderHistory.js";
import { getAuthorizationToken } from "../utils/getAuthorizationToken.js";

dotenv.config();
const clientSWA = process.env.OKTO_CLIENT_SWA as Hex;

interface Data {
  caip2Id: string;
  transaction: object;
}

/**
 * EvM Raw Transaction Intent: this function executes the raw transaction between addresses.
 * For more information, check https://docs.okto.tech/docs/openapi/evmRawTransaction
 *
 * @param data - The parameters for transferring the Raw Transaction (caip2Id, transaction)
 * @param sessionConfig - The sessionConfig object containing user SWA and session keys.
 * @returns The jobid for the NFT transfer.
 */
async function rawTransaction(
  data: Data,
  sessionConfig: SessionConfig,
  feePayerAddress?: Address
) {
  // Generate OktoAuthToken using session data
  const OktoAuthToken = await getAuthorizationToken(sessionConfig);

  // Generate a unique UUID based nonce
  const nonce = uuidv4();

  // Get the Intent execute API info
  const jobParametersAbiType = "(string caip2Id, bytes[] transactions)";
  const gsnDataAbiType = `(bool isRequired, string[] requiredNetworks, ${jobParametersAbiType}[] tokens)`;

  // get the Chain CAIP2ID required for payload construction
  // Note: Only the chains enabled on the Client's Developer Dashboard will be shown in the response
  const chainsResponse = await getChains(OktoAuthToken);
  const chains = chainsResponse.data.network;
  console.log("Chains: ", chains);
  // Sample Response:
  // Chains: [
  //   {
  //     caip_id: 'eip155:998',
  //     network_name: 'HYPERLIQUID_EVM_TESTNET',
  //     chain_id: '998',
  //     logo: 'HYPERLIQUID_EVM_TESTNET',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'EVM',
  //     network_id: '32270d5d-4d13-3ee2-a832-b6543c98e431',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   },
  //   {
  //     caip_id: 'eip155:84532',
  //     network_name: 'BASE_TESTNET',
  //     chain_id: '84532',
  //     logo: 'BASE_TESTNET',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'EVM',
  //     network_id: '8970cafe-4fc2-3a71-a7d3-77a672b749e9',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   },
  //   {
  //     caip_id: 'eip155:80002',
  //     network_name: 'POLYGON_TESTNET_AMOY',
  //     chain_id: '80002',
  //     logo: 'POLYGON_TESTNET_AMOY',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'EVM',
  //     network_id: '4adbfabd-d5e0-3d99-89e2-030eea922ed7',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   },
  //   {
  //     caip_id: 'solana:EtWTRABZaYq6iMfeYKouRu166VU2xqa1',
  //     network_name: 'SOLANA_DEVNET',
  //     chain_id: '103',
  //     logo: 'SOL DEVNET',
  //     sponsorship_enabled: false,
  //     gsn_enabled: false,
  //     type: 'SVM',
  //     network_id: 'fb10a9ca-d197-378d-8fb3-fd95345571f3',
  //     onramp_enabled: false,
  //     whitelisted: true
  //   }
  // ]

  const currentChain = chains.find(
    (chain: any) => chain.caip_id === data.caip2Id
  );

  if (!currentChain) {
    throw new Error(`Chain Not Supported`);
  }

  // if feePayerAddress is not provided, it will be set to the default value '0x0000000000000000000000000000000000000000
  if (!feePayerAddress) {
    feePayerAddress = Constants.FEE_PAYER_ADDRESS;
  }

  console.log("feePayerAddress:", feePayerAddress);
  console.log("current chain:", currentChain);

  // create the UserOp Call data for raw txn execute intent
  const calldata = encodeAbiParameters(
    parseAbiParameters("bytes4, address,uint256, bytes"),
    [
      Constants.EXECUTE_USEROP_FUNCTION_SELECTOR, //execute userop function selector
      Constants.getEnvConfig().JOB_MANAGER_ADDRESS, //The Job Manager address is now replaced with "RawTransactionBloc" address
      Constants.USEROP_VALUE,
      encodeFunctionData({
        abi: INTENT_ABI,
        functionName: Constants.FUNCTION_NAME,
        args: [
          toHex(nonceToBigInt(nonce), { size: 32 }),
          clientSWA,
          sessionConfig.userSWA,
          feePayerAddress,
          encodeAbiParameters(
            parseAbiParameters("(bool gsnEnabled, bool sponsorshipEnabled)"),
            [
              {
                gsnEnabled: currentChain.gsn_enabled ?? false,
                sponsorshipEnabled: currentChain.sponsorship_enabled ?? false,
              },
            ]
          ),
          encodeAbiParameters(parseAbiParameters(gsnDataAbiType), [
            {
              isRequired: false,
              requiredNetworks: [],
              tokens: [],
            },
          ]),
          encodeAbiParameters(parseAbiParameters(jobParametersAbiType), [
            {
              caip2Id: data.caip2Id,
              transactions: [
                toHex(stringToBytes(JSON.stringify(data.transaction))),
              ],
            },
          ]),
          Constants.INTENT_TYPE.RAW_TRANSACTION,
        ],
      }),
    ]
  );
  console.log("Calldata: ", calldata);
  // Sample Response:
  // Calldata:  0x8dd7712f0000000000000000000000000000000000000000000000000000000000000000000000000000000039104019a157566d065c3eac7d75f9c0e3df80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004248fa61ac000000000000000000000000000000000a9e8bc062b4940b7a19638b8b17051f1000000000000000000000000e8201e368557508bf183d4e2dce1b1a1e0bd20fa000000000000000000000000fbb05b5bf0192458e0ca5946d7b82a61eba9802500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c6569703135353a383435333200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000897b2266726f6d223a22307836614664343246393764373963373936374635323845354333323032333046303731614337463161222c22746f223a22307838616166314635413136384545373844316239366466333435654361663030393836303742384636222c2264617461223a223078222c2276616c7565223a313030303030303030303030307d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5241575f5452414e53414354494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

  const gasPrice = await getUserOperationGasPrice(OktoAuthToken);

  // Construct the UserOp with all the data fetched above, sign it and add the signature to the userOp
  const userOp = {
    sender: sessionConfig.userSWA,
    nonce: toHex(nonceToBigInt(nonce), { size: 32 }),
    paymaster: Constants.getEnvConfig().PAYMASTER_ADDRESS, //paymaster address
    callGasLimit: toHex(Constants.GAS_LIMITS.CALL_GAS_LIMIT),
    verificationGasLimit: toHex(Constants.GAS_LIMITS.VERIFICATION_GAS_LIMIT),
    preVerificationGas: toHex(Constants.GAS_LIMITS.PRE_VERIFICATION_GAS),
    maxFeePerGas: gasPrice.maxFeePerGas,
    maxPriorityFeePerGas: gasPrice.maxPriorityFeePerGas,
    paymasterPostOpGasLimit: toHex(
      Constants.GAS_LIMITS.PAYMASTER_POST_OP_GAS_LIMIT
    ),
    paymasterVerificationGasLimit: toHex(
      Constants.GAS_LIMITS.PAYMASTER_VERIFICATION_GAS_LIMIT
    ),
    callData: calldata,
    paymasterData: await paymasterData({
      nonce,
      validUntil: new Date(Date.now() + 6 * Constants.HOURS_IN_MS),
    }),
  };
  console.log("Unsigned UserOp: ", userOp);
  // Sample Response:
  // Unsigned UserOp:  {
  //   sender: '0xfBb05b5Bf0192458E0Ca5946d7B82a61Eba98025',
  //   nonce: '0x00000000000000000000000000000000a9e8bc062b4940b7a19638b8b17051f1',
  //   paymaster: '0x74324fA6Fa67b833dfdea4C1b3A9898574d076e3',
  //   callGasLimit: '0x493e0',
  //   verificationGasLimit: '0x30d40',
  //   preVerificationGas: '0xc350',
  //   maxFeePerGas: '0x77359400',
  //   maxPriorityFeePerGas: '0x77359400',
  //   paymasterPostOpGasLimit: '0x186a0',
  //   paymasterVerificationGasLimit: '0x186a0',
  //   callData: '0x8dd7712f0000000000000000000000000000000000000000000000000000000000000000000000000000000039104019a157566d065c3eac7d75f9c0e3df80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004248fa61ac000000000000000000000000000000000a9e8bc062b4940b7a19638b8b17051f1000000000000000000000000e8201e368557508bf183d4e2dce1b1a1e0bd20fa000000000000000000000000fbb05b5bf0192458e0ca5946d7b82a61eba9802500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c6569703135353a383435333200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000897b2266726f6d223a22307836614664343246393764373963373936374635323845354333323032333046303731614337463161222c22746f223a22307838616166314635413136384545373844316239366466333435654361663030393836303742384636222c2264617461223a223078222c2276616c7565223a313030303030303030303030307d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5241575f5452414e53414354494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  //   paymasterData: '0x000000000000000000000000e8201e368557508bf183d4e2dce1b1a1e0bd20fa000000000000000000000000000000000000000000000000000000006812a19900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004174e7556df3e1534c3923f64460e7998b57c942d9ec098e7a552d3484db17eb461e8752fd9ee54b7a1cebf3ee6cf7a9d6c26e89c6720f04077de689f31e66e54c1b00000000000000000000000000000000000000000000000000000000000000'
  // }

  const signedUserOp = await signUserOp(userOp, sessionConfig);
  console.log("Signed UserOp: ", signedUserOp);
  // Sample Response:
  // Signed UserOp:  {
  //   sender: '0xfBb05b5Bf0192458E0Ca5946d7B82a61Eba98025',
  //   nonce: '0x00000000000000000000000000000000a9e8bc062b4940b7a19638b8b17051f1',
  //   paymaster: '0x74324fA6Fa67b833dfdea4C1b3A9898574d076e3',
  //   callGasLimit: '0x493e0',
  //   verificationGasLimit: '0x30d40',
  //   preVerificationGas: '0xc350',
  //   maxFeePerGas: '0x77359400',
  //   maxPriorityFeePerGas: '0x77359400',
  //   paymasterPostOpGasLimit: '0x186a0',
  //   paymasterVerificationGasLimit: '0x186a0',
  //   callData: '0x8dd7712f0000000000000000000000000000000000000000000000000000000000000000000000000000000039104019a157566d065c3eac7d75f9c0e3df80300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004248fa61ac000000000000000000000000000000000a9e8bc062b4940b7a19638b8b17051f1000000000000000000000000e8201e368557508bf183d4e2dce1b1a1e0bd20fa000000000000000000000000fbb05b5bf0192458e0ca5946d7b82a61eba9802500000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c6569703135353a383435333200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000897b2266726f6d223a22307836614664343246393764373963373936374635323845354333323032333046303731614337463161222c22746f223a22307838616166314635413136384545373844316239366466333435654361663030393836303742384636222c2264617461223a223078222c2276616c7565223a313030303030303030303030307d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f5241575f5452414e53414354494f4e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
  //   paymasterData: '0x000000000000000000000000e8201e368557508bf183d4e2dce1b1a1e0bd20fa000000000000000000000000000000000000000000000000000000006812a19900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004174e7556df3e1534c3923f64460e7998b57c942d9ec098e7a552d3484db17eb461e8752fd9ee54b7a1cebf3ee6cf7a9d6c26e89c6720f04077de689f31e66e54c1b00000000000000000000000000000000000000000000000000000000000000',
  //   signature: '0x1bc6893c840eb2cdc38844f414f585e5ce14d3afed7861666b4dd8c19b48f6305d5be99dd05d251df41f9ec04f818e4c3459b50bf3f17c2dd1a1758c270c03be1c'
  // }

  // Execute the userOp
  const executeResponse: ExecuteUserOpResponse = await executeUserOp(
    signedUserOp,
    OktoAuthToken
  );
  const jobId = executeResponse.data.jobId;
  console.log("JobId: ", jobId);
  // Sample Response:
  // JobId: 3ee33731-9e96-4ab9-892c-ea476b36295d

  // Check the status of the jobId and get the transaction details
  const txn_details = await getOrderHistory(
    OktoAuthToken,
    jobId,
    "RAW_TRANSACTION"
  );
  console.log("Order Details:", JSON.stringify(txn_details, null, 2));
}

// To get the caip2Id, please check: https://docsv2.okto.tech/docs/openapi/technical-reference

// Sample data for BASE_TESTNET
// 1. Simulating token transfer
// const data: Data = {
//   caip2Id: "eip155:84532", // BASE_TESTNET
//   transaction: {
//     from: "0xA8c1021b6322e5fF8e059295fa027A1380789037", // User's wallet address on BASE_TESTNET. Get it by using the getAccount() endpoint.
//     to: "0x88beE8eb691FFAFB192BAC4D1E7042e1b44c3eF2",
//     data: "0x", // Default empty data
//     value: "100000000000",
//   },
// };
//
// 2. Simulating contract interaction
// const data: Data = {
//   caip2Id: "eip155:84532", // BASE_TESTNET
//   transaction: {
//     from: "0xA8c1021b6322e5fF8e059295fa027A1380789037", // User's wallet address on BASE_TESTNET. Get it by using the getAccount() endpoint.
//     to: "0xfa404DDE5B64862D9bDA6A3AA6cA0736F5DB6e86", // Contract address
//     data: "0x6057361d0000000000000000000000000000000000000000000000000000000000000001", // Encoded transaction data. Can be generated using viem/ethers.js or Okto's ABI encoder tool (https://docs.okto.tech/tools).
//     value: "10000000000000",
//   },
// };

// Sample data for APTOS_TESTNET
// 1. Simulating token transfer
// const data: Data = {
//   caip2Id: "aptos:testnet",
//   transaction: {
//     function: "0x1::aptos_account::transfer",
//     typeArguments: [],
//     functionArguments: [
//       "0x9ed7f8c95c5e2c3cb06dfbb48681b87401fabeb88b7d710db3720f7a2ca3fffc",
//       "10000",
//     ],
//   },
// };
//
// 2. Simulating contract interaction
// const data: Data = {
//   caip2Id: "aptos:testnet",
//   transaction: {
//     function: "0x1::aptos_account::batch_transfer",
//     typeArguments: [],
//     functionArguments: [
//       [
//         "0x9ed7f8c95c5e2c3cb06dfbb48681b87401fabeb88b7d710db3720f7a2ca3fffc",
//         "0x2053680713a672fc41dbf71862efcbd14e01ba99bcb3913e933f5335a9f6e2b1",
//       ],
//       ["10", "10"],
//     ],
//   },
// };


const data: Data = {
  caip2Id: "eip155:84532", // BASE_TESTNET
  transaction: {
    from: "0xA8c1021b6322e5fF8e059295fa027A1380789037",
    to: "0x88beE8eb691FFAFB192BAC4D1E7042e1b44c3eF2",
    data: "0x", // Default empty data
    value: "100000000000",
  },
};

const sessionConfig: SessionConfig = {
  sessionPrivKey:
    "0x8b960c4449d80717ca5e417d22b29fda5083b8f15f574ad0162cf271dc2f68ea",
  sessionPubKey:
    "0x045e557aa164763505736c06c1d96c80215bfb4823b5951e6133493d3ec67c5007fc6d6375998432605d7556b47d31e39fb2ba7ba0df33d5ea7a83d3eb19ca12ea",
  userSWA: "0x2FAb7Eb7475F6fF9a0258F1fb4383a6aA30A18e0",
};

/*
 * FeePayerAddress is the PaymasterSWA, which can be retrieved from the okto Developer dashboard - dashboard.okto.tech;
 * The gas fee will be deducted from the sponsor wallet; the sponsor wallet must be enabled and funded on the source chain on the txn you are performing.
 * Do not provide a field named feePayerAddress in estimateUserOpPayload if sponsorship is not enabled.
 */
const feePayerAddress: Address = "0x16AE632061A09B43239a20C83eE311245d5e03BA";

/* if sponsorship is not enabled */
rawTransaction(data, sessionConfig);

/* if sponsorship is enabled */
rawTransaction(data, sessionConfig, feePayerAddress);
