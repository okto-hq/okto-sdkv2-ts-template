/*******************************************
 *                                         *
 *  WARNING: THIS IS DEMO CODE.            *
 *  DO NOT USE IN PRODUCTION WITHOUT       *
 *  CUSTOMIZING TO YOUR SPECIFIC NEEDS.    *
 *                                         *
 *******************************************/

import axios from "axios";
import { signMessage } from "viem/accounts";
import { fromHex } from "viem";
import { generatePackedUserOp, generateUserOpHash } from "./generateUserOp.js";
import type { ExecuteUserOpResponse } from "../helper/types.js";
import { Constants } from "../helper/constants.js";

export interface SessionConfig {
  sessionPrivKey: string;
  sessionPubKey: string;
  userSWA: string;
}

/**
 * Signs a user operation
 *
 * This function converts a user operation to its packed format, generates a hash,
 * and signs it using the provided session private key.
 *
 * @param userop - The user operation object containing all transaction details such as:
 *                 sender, nonce, callData, gas parameters, etc.
 * @param sessionConfig - Configuration containing session credentials:
 *                       - sessionPrivKey: The private key used for signing
 *                       - sessionPubkey: The corresponding public key
 *                       - userSWA: The user's Smart Wallet Account address
 *
 * @returns The original user operation with the signature field added
 */
export async function signUserOp(userop: any, sessionConfig: SessionConfig) {
  const privateKey = sessionConfig.sessionPrivKey as `0x${string}`;
  const packeduserop = generatePackedUserOp(userop);
  const hash = generateUserOpHash(packeduserop);
  const sig = await signMessage({
    message: {
      raw: fromHex(hash, "bytes"),
    },
    privateKey,
  });
  userop.signature = sig;
  return userop;
}

/**
 * Execute a user operation
 *
 * This function sends the signed user operation to Okto's gateway for execution
 * using a JSON-RPC request.
 *
 * @param userop - The signed user operation object containing all transaction details
 *                and the signature generated by signUserOp
 * @param authToken - Authentication token for Okto's API, generated from getAuthorizationToken
 *
 * @returns The job ID that can be used to track the transaction's status
 *
 */
export async function executeUserOp(userop: any, authToken: string): Promise<ExecuteUserOpResponse> {
  try {
    console.log("execute request payload: ", userop);
    console.log("finally sending the axios request for execute...........");
    const response = await axios.post(
      `${Constants.getBaseUrl()}/api/oc/v1/execute`,
      userop,
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${authToken}`,
        },
      }
    );

    return response.data as ExecuteUserOpResponse;
  } catch (error: any) {
    console.error("Error executing user operation:", error.response?.data );
    throw error;
  }
}

export async function getUserOperationGasPrice(authToken: string) {

  const response = await axios.get(
    `${Constants.getBaseUrl()}/api/oc/v1/gas-values`,
    {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
    }
  );

  console.log("Gas Price Response:", response.data);

  return response.data?.data;
}
